#!/usr/bin/perl -w -I/usr/local/eprints/perl_lib

###############################################################################
#
# Retrieve Microsoft Academic Knowledge API data.
#
###############################################################################
#
#  Copyright 2016 University of Zurich. All Rights Reserved.
#
#  Martin Br채ndle
#  Zentrale Informatik
#  Universit채t Z체rich
#  Stampfenbachstr. 73
#  CH-8006 Z체rich
#  
#  The plug-ins are free software; you can redistribute them and/or modify
#  them under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  The plug-ins are distributed in the hope that they will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with EPrints 3; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###############################################################################


=pod

=head1 NAME

B<microsoft_academic> - Retrieve Microsoft Academic Knowledge API data.

=head1 SYNOPSIS

B<<microsoft_academic> I<repository_id> [B<options>] [I<eprint_id> I<eprint_id> ...]

=head1 DESCRIPTION

Descriptions

=head1 ARGUMENTS

=over 8

=item [I<eprint_id> I<eprint_id> ...]

A list of eprint_ids used for synchronizing. If not specified, the complete dataset will be used.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--limit> I<n>

Limits the number of queries to the first n eprints.

=item B<--mode> I<mode>

Defines mode of requests. Possible modes are: full, title_words, title_exact, id, 
doi (DOI not yet possible), and read. The read mode does not carry out requests, 
but reads existing MS Academic Knowledge API data from the file system.
Default mode: full

=item B<--dir DIRECTORY>

Stores the XML report in DIRECTORY and the MS Academic Knowlegde API responses in DIRECTORY/json
(see option --savejson). If nothing is specified, <eprints_root>/var/msacademic/ is used 
for DIRECTORY.

=item B<--savejson>

Save the MS Academic Knowlegde API response in DIRECTORY/json. The filename for each requested 
eprint is msacademic_{eprintid}.txt

=item B<--mapping FILE>

Specifies the path for a mapping.csv file that defines the mapping from the institute IDs (subjectid) to
disciplines. If nothing is specified, <eprints_root>/var/msacademic/mapping.csv is used for FILE.
The first column of the CSV file is the institute ID, the second the discipline. If an eprint has 
different subjectid than in the CSV list of subjectids, the discipline "Other" is assigned.

=item B<--restart>

Tries a restart. Does a --read for all dowloaded msacademic_{eprintid}.txt documents that already exist in 
the results directory, then continues querying with the mode indicated with --mode. 

=back

=cut

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use EPrints;
use Encode;

#
# Global variables
#
my $report = {};

#
# Rules for mapping faculties to disciplines
#
my $mapping = {};

#
# Parameters for command line options
#
my $help = 0;
my $man = 0;
my $verbose = 0;
my $quiet = 0;
my $limit = 999999999;
my $restart = 0;
my $mode = 'full';
my $report_dir = '';
my $save_json = 0;
my $mapping_file = '';

#
# Parse the command line options
#
Getopt::Long::Configure("permute");
GetOptions(
	'help|?' => \$help,
	'man' => \$man,
	'verbose+' => \$verbose,
	'quiet' => \$quiet,
	'limit=s' => \$limit,
	'mode=s' => \$mode,
	'dir=s' => \$report_dir,
	'savejson' => \$save_json,
	'mapping=s' => \$mapping_file,
	'restart' => \$restart,
) || pod2usage( 2 );

#
# Print out help screens, if desired
#
pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;
pod2usage( 2 ) if( scalar @ARGV < 1 ); 

#
# Configure verbosity
#
my $noise = 1;
$noise = 0 if( $quiet );
$noise = 1 + $verbose if( $verbose );

#
# Get an EPrints session and the live dataset
#
my $repoid = $ARGV[0];

my $session = EPrints::Session->new( 1, $repoid, $noise );
if ( !defined $session )
{
	print STDERR "Failed to load repository: $repoid\n";
	exit 1;
}

my $repository = $session->get_repository;
my $dataset = $session->get_repository->get_dataset( "archive" );


if ( !defined $dataset )
{
	print STDERR "Could not access the live archive!\n";
	$session->terminate;
	exit 1;
}

#
# Read configuration parameters
#
my $msacademic_fields = $repository->config( "msacademic", "msacademic_fields");
my $msacademic_answer_count = $repository->config( "msacademic", "answer_count");
my $crawl_retry = $repository->config( "msacademic", "crawl_retry");
my $crawl_delay = $repository->config( "msacademic", "crawl_delay");
my $eprint_fields = $repository->config( "msacademic", "eprint_fields" );
my $institution_id = $repository->config( "msacademic", "affiliation_id" );

if ($report_dir eq '')
{
	$report_dir = $repository->get_conf( "base_path" ) . '/var/msacademic';
}
else
{
	if (! -d $report_dir )
	{
		print STDERR "Directory $report_dir does not exist!\n";
		$session->terminate;
		exit 1;
	} 
}
create_dirs($report_dir);

#
# Create a plugin  
#
my $plugin;
$plugin = $session->plugin( 'Import::CitationService::MSAcademic' );

if ( !defined($plugin) )
{
	$session->terminate();
	exit 1;
}

#
# Prepare the plugin parameters
#
$plugin->{report} = $report;
$plugin->{mapping} = $mapping;

$plugin->{param}->{mode} = $mode;
$plugin->{param}->{limit} = $limit;
$plugin->{param}->{verbose} = $verbose;
$plugin->{param}->{noise} = $noise;
$plugin->{param}->{restart} = $restart;
$plugin->{param}->{report_dir} = $report_dir;
$plugin->{param}->{save_json} = $save_json;
$plugin->{param}->{msacademic_fields} = $msacademic_fields;
$plugin->{param}->{answer_count} = $msacademic_answer_count;
$plugin->{param}->{crawl_retry} = $crawl_retry;
$plugin->{param}->{crawl_delay} = $crawl_delay;
$plugin->{param}->{institution_id} = $institution_id;
$plugin->{param}->{eprint_fields} = $eprint_fields;


#
# Prepare the query method 
#
if ($mode eq 'title_exact' || $mode eq 'title_words' || $mode eq 'id' )
{
	$plugin->set_query_method( "_get_queryexp_" . $mode );
}

#
# Read discipline mappings
#
if ($mapping_file eq '')
{
	$mapping_file = $repository->get_conf( "base_path" ) . '/var/msacademic/mapping.csv';
}
$plugin->read_discipline_mappings( $mapping_file );

#
# Carry out the queries and gather the results
#
my $eplist;

if ( scalar(@ARGV) > 1 )
{
	# for specific eprintids in the live archive
	my $plist = "";
	
	for (my $i = 0; $i < scalar(@ARGV); $i++)
	{
		$plist = $plist . $ARGV[$i] . " ";
	}

	$plist = substr($plist,0,-1) if (length($plist) > 0);
	
	my $epexp = EPrints::Search->new(
   		session => $session,
   		dataset => $dataset,
   		order => "eprintid",
   	);
   	
   	$epexp->add_field(
   		$dataset->get_field("eprintid"),
   		$plist,
   		"EQ",
   		"ANY",
   	);
   	
   	$eplist = $epexp->perform_search;
}
else
{
	$eplist = $dataset->search;
}

$eplist->map( \&process_records, $plugin );

#
# Save the report as XML file
#
$plugin->save_report_xml();

#
# Save the report as CSV file
#
$plugin->save_report_csv();

#
# Clean up
#
$eplist->dispose();
$session->terminate();

exit;

#
# Gather the result(s). This is the workhorse.
#
sub process_records
{
	my ($session, $dataset, $eprint, $plugin) = @_;
	
	my $param = $plugin->{param};

	my $verbose = $param->{verbose};
	my $limit = $param->{limit};
	my $mode = $param->{mode};
	
	my $eprintid = $eprint->id;
	return if $eprintid > $limit;
	return if ( !($plugin->can_process( $eprint ) ));
	
	print STDOUT "Processing eprint $eprintid\n" if $verbose;

	if ($mode eq 'read')
	{
		$plugin->read_msacademic_data( $eprint );
	}
	else
	{
		my $epdata = $plugin->get_epdata( $eprint );
		
		# We don't use the standard Import/trigger mechanism in this script.
		if (defined $epdata)
		{
			update_record( $eprint, $epdata );
		}
	}

	$plugin->process_eprint_fields( $dataset, $eprint );
	
	return;
}

#
# Update the eprint
#
sub update_record
{
	my ($eprint, $epdata) = @_;
	
	$epdata->{datestamp} = EPrints::Time::get_iso_timestamp();
	$eprint->set_value( "msacademic", $epdata );
	$eprint->commit();
		
	return;
}


sub create_dirs
{
	my ($dir) = @_;
	
	EPrints::Platform::mkdir( $dir );
	EPrints::Platform::mkdir( $dir . '/json' );
	
	return;
}


=head1 AUTHOR

Martin Braendle <martin.braendle@id.uzh.ch>, Zentrale Informatik, University of Zurich

=head1 COPYRIGHT

=for COPYRIGHT BEGIN

Copyright 2016- University of Zurich.

=for COPYRIGHT END

=for LICENSE BEGIN

This file is part of ZORA based on EPrints L<http://www.eprints.org/>.

EPrints is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EPrints is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details.

You should have received a copy of the GNU Lesser General Public
License along with EPrints.  If not, see L<http://www.gnu.org/licenses/>.

=for LICENSE END

